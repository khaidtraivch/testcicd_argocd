stages:
  - deploy

deploy_argocd:
  stage: deploy
  tags:
    - shell  # ho·∫∑c docker t√πy runner b·∫°n c·∫•u h√¨nh
  only:
    - main
  before_script:
    - curl -sSL -o argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
    - chmod +x argocd
    - sudo mv argocd /usr/local/bin/
  script:
    - echo "üåê ƒêƒÉng nh·∫≠p Argo CD CLI"
    - argocd login $ARGOCD_SERVER --username $ARGOCD_USERNAME --password $ARGOCD_PASSWORD --insecure
    - echo "üîÑ C·∫≠p nh·∫≠t image tag:$CI_COMMIT_SHORT_SHA"
    - argocd app set "$ARGOCD_APP_NAME" -p image.tag="$CI_COMMIT_SHORT_SHA"
    - argocd app sync "$ARGOCD_APP_NAME"
    - echo "‚úÖ Deploy th√†nh c√¥ng"





# deploy_production:
#   stage: deploy
#   tags:
#     - shell
#   only:
#     - main
#   before_script:
#     - mkdir -p ~/.ssh
#     - rm -f ~/.ssh/known_hosts
#     - echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
#     - chmod 600 ~/.ssh/id_rsa
#     - ping -c 3 "$DEPLOY_HOST" || echo "‚ö†Ô∏è Kh√¥ng th·ªÉ ping t·ªõi $DEPLOY_HOST"
#     - ping -c 3 127.0.0.1 || echo "‚ö†Ô∏è Kh√¥ng th·ªÉ ping t·ªõi 127.0.0.1"
#     - nc -zv "$DEPLOY_HOST" 22 || echo "‚ö†Ô∏è C·ªïng SSH (22) kh√¥ng th·ªÉ truy c·∫≠p tr√™n $DEPLOY_HOST"
#     - nc -zv 127.0.0.1 22 || echo "‚ö†Ô∏è C·ªïng SSH (22) kh√¥ng th·ªÉ truy c·∫≠p tr√™n 127.0.0.1"
#     - ssh-keyscan -H 127.0.0.1 >> ~/.ssh/known_hosts
#     - if [ $? -ne 0 ]; then echo "‚ùå Th·∫•t b·∫°i khi qu√©t kh√≥a SSH cho 127.0.0.1"; exit 1; fi
#     - echo "‚úÖ Qu√©t kh√≥a SSH th√†nh c√¥ng cho 127.0.0.1"
#   script:
#     - echo "üîê ƒêƒÉng nh·∫≠p v√†o $DEPLOY_USER@127.0.0.1"
#     - ssh -o StrictHostKeyChecking=no "$DEPLOY_USER@127.0.0.1" "docker stop app || true; docker rm app || true; docker pull $IMAGE_NAME:latest; docker run -d --name app -p 5000:5000 $IMAGE_NAME:latest"

# trivy_scan:
#   stage: post_scan
#   tags:
#     - ubuntu
#   image: docker:latest
#   services:
#     - docker:dind
#   variables:
#     DOCKER_HOST: tcp://docker:2375
#     DOCKER_TLS_CERTDIR: ""
#   script:
#     - docker pull aquasec/trivy:latest
#     - docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy:latest image $IMAGE_NAME:latest

# zap_scan:
#   stage: post_scan
#   tags:
#     - zap
#   image: docker:latest
#   services:
#     - docker:dind
#   variables:
#     DOCKER_HOST: tcp://docker:2375
#     DOCKER_TLS_CERTDIR: ""
#   script:
#     - until docker info; do echo "Waiting for docker daemon..."; sleep 2; done
#     - docker network create zapnet || true
#     - docker run -d --network zapnet --name test-app $IMAGE_NAME:latest
#     - docker run --rm --network zapnet -v $CI_PROJECT_DIR:/zap/wrk/:rw ghcr.io/zaproxy/zaproxy zap-baseline.py -t http://test-app:5000 -r zap-report.html
#     - docker stop test-app || true
#     - docker rm test-app || true
#   artifacts:
#     paths:
#       - zap-report.html
      
#   allow_failure: true  # <-- cho ph√©p failure kh√¥ng l√†m fail pipeline
